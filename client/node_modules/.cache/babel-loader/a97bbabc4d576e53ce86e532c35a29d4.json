{"ast":null,"code":"var _jsxFileName = \"/Users/sihanzhao/Desktop/uf-traffic/client/src/components/map/map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport mapStyles from \"./mapStyles\";\nimport { getCrashes } from \"../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"60vh\",\n  width: \"70vw\"\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst center = {\n  lat: 28,\n  lng: -84\n};\nexport default function Map() {\n  _s();\n\n  const [values, setValues] = useState({\n    crashList: [],\n    error: \"\"\n  });\n  const [selected, setSelected] = useState(null);\n  const {\n    crashList,\n    error\n  } = values;\n  const [map, setMap] = useState(null);\n\n  const handleZoomChanged = () => {\n    console.log(map.getZoom()); // get coordinator\n    // get crashes in this coordinator, get vehicle, get driver, store in global\n  };\n\n  const init = () => {\n    getCrashes().then(data => {\n      if (data.error) {\n        setValues({ ...values,\n          error: data.error\n        });\n      } else {\n        setValues({ ...values,\n          crashList: data\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    libraries\n  });\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      id: \"map\",\n      mapContainerStyle: mapContainerStyle,\n      zoom: 7.2,\n      center: center,\n      options: options,\n      onLoad: map => {\n        setMap(map);\n      },\n      onZoomChanged: handleZoomChanged,\n      children: [crashList.map(crash => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: crash.latitude,\n          lng: crash.longitude\n        },\n        onClick: () => {\n          setSelected(crash);\n        }\n      }, crash.report_number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.latitude,\n          lng: selected.longitude\n        },\n        onCloseClick: () => {\n          setSelected(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"bear\",\n              children: \"\\uD83D\\uDC3B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), \" \", \"Alert\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Spotted \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"o3I9nKInw8zdCv76j9mGewDeUL0=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/sihanzhao/Desktop/uf-traffic/client/src/components/map/map.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","mapStyles","getCrashes","require","config","libraries","mapContainerStyle","height","width","options","styles","disableDefaultUI","zoomControl","center","lat","lng","Map","values","setValues","crashList","error","selected","setSelected","map","setMap","handleZoomChanged","console","log","getZoom","init","then","data","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_API_KEY","crash","latitude","longitude","report_number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport mapStyles from \"./mapStyles\";\nimport { getCrashes } from \"../api/api\";\nrequire('dotenv').config();\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"60vh\",\n  width: \"70vw\",\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: 28,\n  lng: -84,\n};\n\nexport default function Map() {\n  const [values, setValues] = useState({\n    crashList: [],\n    error: \"\",\n  });\n  const [selected, setSelected] = useState(null);\n\n  const { crashList, error } = values;\n\n  const [map, setMap] = useState(null);\n\n  const handleZoomChanged = () => {\n    console.log(map.getZoom());\n    // get coordinator\n    // get crashes in this coordinator, get vehicle, get driver, store in global\n  }\n\n  const init = () => {\n    getCrashes().then(data => {\n      if (data.error) {\n        setValues({ ...values, error: data.error });\n      } else {\n\n        setValues({\n          ...values,\n          crashList: data\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    libraries,\n  });\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={7.2}\n        center={center}\n        options={options}\n        onLoad={map => { setMap(map) }}\n        onZoomChanged={handleZoomChanged}\n      >\n        {crashList.map((crash) => (\n          <Marker\n            key={crash.report_number}\n            position={{ lat: crash.latitude, lng: crash.longitude }}\n            onClick={() => {\n              setSelected(crash);\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.latitude, lng: selected.longitude }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>\n                <span role=\"img\" aria-label=\"bear\">\n                  üêª\n                </span>{\" \"}\n                Alert\n              </h2>\n              <p>Spotted </p>\n            </div>\n          </InfoWindow>\n        ) : null}\n\n\n      </GoogleMap>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}