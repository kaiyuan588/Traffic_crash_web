{"ast":null,"code":"var _jsxFileName = \"/Users/sihanzhao/Desktop/uf-traffic/client/src/components/map/map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, TrafficLayer } from \"@react-google-maps/api\";\nimport mapStyles from \"./mapStyles\";\nimport { getCrashes } from \"../api/api\";\nimport CrashCard from \"../chart/crash-card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"60vh\",\n  width: \"70vw\"\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst center = {\n  lat: 28,\n  lng: -84\n};\nexport default function Map() {\n  _s();\n\n  const [values, setValues] = useState({\n    crashList: [],\n    error: \"\"\n  });\n  const [selected, setSelected] = useState(null);\n  const {\n    crashList,\n    error\n  } = values;\n\n  const init = () => {\n    getCrashes().then(data => {\n      if (data.error) {\n        setValues({ ...values,\n          error: data.error\n        });\n      } else {\n        setValues({ ...values,\n          crashList: data\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    libraries\n  });\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      id: \"map\",\n      mapContainerStyle: mapContainerStyle,\n      zoom: 7,\n      center: center,\n      options: options,\n      children: [/*#__PURE__*/_jsxDEV(TrafficLayer, {\n        autoUpdate: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), crashList.map(crash => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: crash.latitude,\n          lng: crash.longitude\n        },\n        onClick: () => {\n          setSelected(crash);\n        },\n        icon: {\n          url: \"../test2.svg\",\n          scaledSize: new window.google.maps.Size(38, 38)\n        }\n      }, crash.report_number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.latitude,\n          lng: selected.longitude\n        },\n        onCloseClick: () => {\n          setSelected(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(CrashCard, {\n          crash: selected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"AZzbcR7v8ywRvWNUJBc9nxT5B7E=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/sihanzhao/Desktop/uf-traffic/client/src/components/map/map.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","TrafficLayer","mapStyles","getCrashes","CrashCard","require","config","libraries","mapContainerStyle","height","width","options","styles","disableDefaultUI","zoomControl","center","lat","lng","Map","values","setValues","crashList","error","selected","setSelected","init","then","data","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_API_KEY","map","crash","latitude","longitude","url","scaledSize","window","google","maps","Size","report_number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n  TrafficLayer,\n} from \"@react-google-maps/api\";\nimport mapStyles from \"./mapStyles\";\nimport { getCrashes } from \"../api/api\";\nimport CrashCard from \"../chart/crash-card\";\n\nrequire('dotenv').config();\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"60vh\",\n  width: \"70vw\",\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: 28,\n  lng: -84,\n};\n\nexport default function Map() {\n\n  const [values, setValues] = useState({\n    crashList: [],\n    error: \"\",\n  });\n  const [selected, setSelected] = useState(null);\n\n  const { crashList, error } = values;\n\n  const init = () => {\n    getCrashes().then(data => {\n      if (data.error) {\n        setValues({ ...values, error: data.error });\n      } else {\n        setValues({\n          ...values,\n          crashList: data\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    libraries,\n  });\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={7}\n        center={center}\n        options={options}\n      >\n        <TrafficLayer autoUpdate />\n        {crashList.map((crash) => (\n          <Marker\n            key={crash.report_number}\n            position={{ lat: crash.latitude, lng: crash.longitude }}\n            onClick={() => {\n              setSelected(crash);\n            }}\n            icon={{\n              url: \"../test2.svg\",\n              scaledSize: new window.google.maps.Size(38,38)\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.latitude, lng: selected.longitude }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <CrashCard crash={selected} />\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}