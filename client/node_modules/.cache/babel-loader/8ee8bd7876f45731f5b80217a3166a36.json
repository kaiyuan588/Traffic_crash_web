{"ast":null,"code":"var _jsxFileName = \"/Users/sihanzhao/Desktop/uf-traffic/client/src/components/map/map.component.js\";\nimport React, { Component } from 'react';\nimport isEmpty from 'lodash.isempty'; // components:\n\nimport Marker from '../components/Marker'; // examples:\n\nimport GoogleMap from '../components/GoogleMap'; // consts\n\nimport LOS_ANGELES_CENTER from '../const/la_center'; // Return map bounds based on list of places\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n  places.forEach(place => {\n    bounds.extend(new maps.LatLng(place.geometry.location.lat, place.geometry.location.lng));\n  });\n  return bounds;\n}; // Re-center map when resizing the window\n\n\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n}; // Fit map to its bounds after the api is loaded\n\n\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places); // Fit map to bounds\n\n  map.fitBounds(bounds); // Bind the resize listener\n\n  bindResizeListener(map, maps, bounds);\n};\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('places.json').then(response => response.json()).then(data => this.setState({\n      places: data.results\n    }));\n  }\n\n  render() {\n    const {\n      places\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !isEmpty(places) && /*#__PURE__*/_jsxDEV(GoogleMap, {\n        defaultZoom: 10,\n        defaultCenter: LOS_ANGELES_CENTER,\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: ({\n          map,\n          maps\n        }) => apiIsLoaded(map, maps, places),\n        children: places.map(place => /*#__PURE__*/_jsxDEV(Marker, {\n          text: place.name,\n          lat: place.geometry.location.lat,\n          lng: place.geometry.location.lng\n        }, place.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/sihanzhao/Desktop/uf-traffic/client/src/components/map/map.component.js"],"names":["React","Component","isEmpty","Marker","GoogleMap","LOS_ANGELES_CENTER","getMapBounds","map","maps","places","bounds","LatLngBounds","forEach","place","extend","LatLng","geometry","location","lat","lng","bindResizeListener","event","addDomListenerOnce","addDomListener","window","fitBounds","apiIsLoaded","Main","constructor","props","state","componentDidMount","fetch","then","response","json","data","setState","results","render","name","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport isEmpty from 'lodash.isempty';\n\n// components:\nimport Marker from '../components/Marker';\n\n// examples:\nimport GoogleMap from '../components/GoogleMap';\n\n// consts\nimport LOS_ANGELES_CENTER from '../const/la_center';\n\n// Return map bounds based on list of places\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n\n  places.forEach((place) => {\n    bounds.extend(new maps.LatLng(\n      place.geometry.location.lat,\n      place.geometry.location.lng,\n    ));\n  });\n  return bounds;\n};\n\n// Re-center map when resizing the window\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n};\n\n// Fit map to its bounds after the api is loaded\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places);\n  // Fit map to bounds\n  map.fitBounds(bounds);\n  // Bind the resize listener\n  bindResizeListener(map, maps, bounds);\n};\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      places: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('places.json')\n      .then((response) => response.json())\n      .then((data) => this.setState({ places: data.results }));\n  }\n\n  render() {\n    const { places } = this.state;\n    return (\n      <>\n        {!isEmpty(places) && (\n          <GoogleMap\n            defaultZoom={10}\n            defaultCenter={LOS_ANGELES_CENTER}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, places)}\n          >\n            {places.map((place) => (\n              <Marker\n                key={place.id}\n                text={place.name}\n                lat={place.geometry.location.lat}\n                lng={place.geometry.location.lng}\n              />\n            ))}\n          </GoogleMap>\n        )}\n      </>\n    );\n  }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}